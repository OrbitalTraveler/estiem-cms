datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(cuid())
  firstName                 String
  lastName                  String
  email                     String?         @unique
  password                  String
  isFirstSignIn             Boolean
  image                     String?
  accounts                  Account[]
  role                      UserRole        @default(MEMBER)
  posts                     Post[]

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

enum UserRole {
  ADMIN
  LEADER
  MEMBER
}

model Account {
  id                        String  @id @default(cuid())
  userId                    String  @unique
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.Text
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?

  user                      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model PasswordResetToken {
  id                        String      @id @default(cuid())
  email                     String
  token                     String      @unique
  expires                   DateTime

  @@unique([email, token])
}

model Post {
  id                        String      @id @default(cuid())
  title                     String
  event                     String
  contents                  Content[]
  description               String
  comment                   String?

  status                    PostStatus  @default(PENDING)

  creatorId                 String      // Foreign key for creator
  creator                   User        @relation(fields: [creatorId], references: [id])

  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

}

enum PostStatus {
  ACCEPTED
  REJECTED
  RETURNED
  PENDING
}

model Content {
  id                        String     @id @default(cuid())
  path                      String     
  postId                    String
  post                      Post       @relation(fields: [postId], references: [id]) // Foreign key to the post

  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
}
